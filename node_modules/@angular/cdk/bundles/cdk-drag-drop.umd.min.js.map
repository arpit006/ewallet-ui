{"version":3,"file":"cdk-drag-drop.umd.min.js","sources":["../../src/cdk/drag-drop/directives/drop-list.ts","../../src/cdk/drag-drop/drag-drop-module.ts","../../src/cdk/drag-drop/drag-utils.ts","../../src/cdk/drag-drop/drag-styling.ts","../../src/cdk/drag-drop/transition-duration.ts","../../src/cdk/drag-drop/drag-ref.ts","../../src/cdk/drag-drop/directives/drag.ts","../../src/cdk/drag-drop/drop-list-ref.ts","../../src/cdk/drag-drop/drop-list-container.ts","../../src/cdk/drag-drop/drag-drop-registry.ts","../../src/cdk/drag-drop/drag-parent.ts","../../src/cdk/drag-drop/directives/drag-handle.ts","../../src/cdk/drag-drop/directives/drag-placeholder.ts","../../src/cdk/drag-drop/directives/drag-preview.ts","../../src/cdk/drag-drop/directives/drop-list-group.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceArray, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  Optional,\n  Directive,\n  ChangeDetectorRef,\n  SkipSelf,\n  Inject,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkDrag} from './drag';\nimport {DragDropRegistry} from '../drag-drop-registry';\nimport {CdkDragDrop, CdkDragEnter, CdkDragExit, CdkDragSortEvent} from '../drag-events';\nimport {CDK_DROP_LIST_CONTAINER, CdkDropListContainer} from '../drop-list-container';\nimport {CdkDropListGroup} from './drop-list-group';\nimport {DropListRef} from '../drop-list-ref';\nimport {DragRef} from '../drag-ref';\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n\n/**\n * Internal compile-time-only representation of a `CdkDropList`.\n * Used to avoid circular import issues between the `CdkDropList` and the `CdkDrag`.\n * @docs-private\n */\nexport interface CdkDropListInternal extends CdkDropList {}\n\n// @breaking-change 8.0.0 `CdkDropList` implements `CdkDropListContainer` for backwards\n// compatiblity. The implements clause, as well as all the methods that it enforces can\n// be removed when `CdkDropListContainer` is deleted.\n\n/** Container that wraps a set of draggable items. */\n@Directive({\n  selector: '[cdkDropList], cdk-drop-list',\n  exportAs: 'cdkDropList',\n  providers: [\n    // Prevent child drop lists from picking up the same group as their parent.\n    {provide: CdkDropListGroup, useValue: undefined},\n    {provide: CDK_DROP_LIST_CONTAINER, useExisting: CdkDropList},\n  ],\n  host: {\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()'\n  }\n})\nexport class CdkDropList<T = any> implements CdkDropListContainer, OnDestroy {\n  /** Keeps track of the drop lists that are currently on the page. */\n  private static _dropLists: CdkDropList[] = [];\n\n  /** Reference to the underlying drop list instance. */\n  _dropListRef: DropListRef<CdkDropList<T>>;\n\n  /** Draggable items in the container. */\n  @ContentChildren(forwardRef(() => CdkDrag)) _draggables: QueryList<CdkDrag>;\n\n  /**\n   * Other draggable containers that this container is connected to and into which the\n   * container's items can be transferred. Can either be references to other drop containers,\n   * or their unique IDs.\n   */\n  @Input('cdkDropListConnectedTo')\n  connectedTo: (CdkDropList | string)[] | CdkDropList | string = [];\n\n  /** Arbitrary data to attach to this container. */\n  @Input('cdkDropListData') data: T;\n\n  /** Direction in which the list is oriented. */\n  @Input('cdkDropListOrientation') orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  /**\n   * Unique ID for the drop zone. Can be used as a reference\n   * in the `connectedTo` of another `CdkDropList`.\n   */\n  @Input() id: string = `cdk-drop-list-${_uniqueIdCounter++}`;\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  @Input('cdkDropListLockAxis') lockAxis: 'x' | 'y';\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  @Input('cdkDropListDisabled')\n  get disabled(): boolean { return this._dropListRef.disabled; }\n  set disabled(value: boolean) {\n    this._dropListRef.disabled = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  @Input('cdkDropListEnterPredicate')\n  enterPredicate: (drag: CdkDrag, drop: CdkDropList) => boolean = () => true\n\n  /** Emits when the user drops an item inside the container. */\n  @Output('cdkDropListDropped')\n  dropped: EventEmitter<CdkDragDrop<T, any>> = new EventEmitter<CdkDragDrop<T, any>>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  @Output('cdkDropListEntered')\n  entered: EventEmitter<CdkDragEnter<T>> = new EventEmitter<CdkDragEnter<T>>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  @Output('cdkDropListExited')\n  exited: EventEmitter<CdkDragExit<T>> = new EventEmitter<CdkDragExit<T>>();\n\n  /** Emits as the user is swapping items while actively dragging. */\n  @Output('cdkDropListSorted')\n  sorted: EventEmitter<CdkDragSortEvent<T>> = new EventEmitter<CdkDragSortEvent<T>>();\n\n  constructor(\n    public element: ElementRef<HTMLElement>,\n    dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() dir?: Directionality,\n    @Optional() @SkipSelf() private _group?: CdkDropListGroup<CdkDropList>,\n    // @breaking-change 8.0.0 `_document` parameter to be made required.\n    @Optional() @Inject(DOCUMENT) _document?: any) {\n\n\n    // @breaking-change 8.0.0 Remove || once `_document` parameter is required.\n    const ref = this._dropListRef = new DropListRef(element, dragDropRegistry,\n        _document || document, dir);\n    ref.data = this;\n    ref.enterPredicate = (drag: DragRef<CdkDrag>, drop: DropListRef<CdkDropList>) => {\n      return this.enterPredicate(drag.data, drop.data);\n    };\n    this._syncInputs(ref);\n    this._proxyEvents(ref);\n    CdkDropList._dropLists.push(this);\n\n    if (_group) {\n      _group._items.add(this);\n    }\n  }\n\n  ngOnDestroy() {\n    const index = CdkDropList._dropLists.indexOf(this);\n    this._dropListRef.dispose();\n\n    if (index > -1) {\n      CdkDropList._dropLists.splice(index, 1);\n    }\n\n    if (this._group) {\n      this._group._items.delete(this);\n    }\n  }\n\n  /** Starts dragging an item. */\n  start(): void {\n    this._dropListRef.start();\n  }\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer: Partial<CdkDropListContainer>,\n    isPointerOverContainer: boolean): void {\n    this._dropListRef.drop(item._dragRef, currentIndex,\n      (previousContainer as CdkDropList)._dropListRef, isPointerOverContainer);\n  }\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void {\n    this._dropListRef.enter(item._dragRef, pointerX, pointerY);\n  }\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void {\n    this._dropListRef.exit(item._dragRef);\n  }\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number {\n    return this._dropListRef.getItemIndex(item._dragRef);\n  }\n\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number,\n            pointerDelta: {x: number, y: number}): void {\n    return this._dropListRef._sortItem(item._dragRef, pointerX, pointerY, pointerDelta);\n  }\n\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number):\n    CdkDropListContainer | null {\n    const result = this._dropListRef._getSiblingContainerFromPosition(item._dragRef, x, y);\n    return result ? result.data : null;\n  }\n\n  /**\n   * Checks whether the user's pointer is positioned over the container.\n   * @param x Pointer position along the X axis.\n   * @param y Pointer position along the Y axis.\n   */\n  _isOverContainer(x: number, y: number): boolean {\n    return this._dropListRef._isOverContainer(x, y);\n  }\n\n  /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n  private _syncInputs(ref: DropListRef<CdkDropList>) {\n    ref.beforeStarted.subscribe(() => {\n      const siblings = coerceArray(this.connectedTo).map(drop => {\n        return typeof drop === 'string' ?\n            CdkDropList._dropLists.find(list => list.id === drop)! : drop;\n      });\n\n      if (this._group) {\n        this._group._items.forEach(drop => {\n          if (siblings.indexOf(drop) === -1) {\n            siblings.push(drop);\n          }\n        });\n      }\n\n      ref.lockAxis = this.lockAxis;\n      ref\n        .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n        .withOrientation(this.orientation)\n        .withItems(this._draggables.map(drag => drag._dragRef));\n    });\n  }\n\n  /**\n   * Proxies the events from a DropListRef to events that\n   * match the interfaces of the CdkDropList outputs.\n   */\n  private _proxyEvents(ref: DropListRef<CdkDropList>) {\n    ref.beforeStarted.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.entered.subscribe(event => {\n      this.entered.emit({\n        container: this,\n        item: event.item.data\n      });\n    });\n\n    ref.exited.subscribe(event => {\n      this.exited.emit({\n        container: this,\n        item: event.item.data\n      });\n    });\n\n    ref.sorted.subscribe(event => {\n      this.sorted.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        container: this,\n        item: event.item.data\n      });\n    });\n\n    ref.dropped.subscribe(event => {\n      this.dropped.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        previousContainer: event.previousContainer.data,\n        container: event.container.data,\n        item: event.item.data,\n        isPointerOverContainer: event.isPointerOverContainer\n      });\n    });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkDropList} from './directives/drop-list';\nimport {CdkDropListGroup} from './directives/drop-list-group';\nimport {CdkDrag} from './directives/drag';\nimport {CdkDragHandle} from './directives/drag-handle';\nimport {CdkDragPreview} from './directives/drag-preview';\nimport {CdkDragPlaceholder} from './directives/drag-placeholder';\n\n@NgModule({\n  declarations: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  exports: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n})\nexport class DragDropModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nexport function moveItemInArray<T = any>(array: T[], fromIndex: number, toIndex: number): void {\n  const from = clamp(fromIndex, array.length - 1);\n  const to = clamp(toIndex, array.length - 1);\n\n  if (from === to) {\n    return;\n  }\n\n  const target = array[from];\n  const delta = to < from ? -1 : 1;\n\n  for (let i = from; i !== to; i += delta) {\n    array[i] = array[i + delta];\n  }\n\n  array[to] = target;\n}\n\n\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nexport function transferArrayItem<T = any>(currentArray: T[],\n                                           targetArray: T[],\n                                           currentIndex: number,\n                                           targetIndex: number): void {\n  const from = clamp(currentIndex, currentArray.length - 1);\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n  }\n}\n\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nexport function copyArrayItem<T = any>(currentArray: T[],\n                                       targetArray: T[],\n                                       currentIndex: number,\n                                       targetIndex: number): void {\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray[currentIndex]);\n  }\n}\n\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value: number, max: number): number {\n  return Math.max(0, Math.min(max, value));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n// Helper type that ignores `readonly` properties. This is used in\n// `extendStyles` to ignore the readonly properties on CSSStyleDeclaration\n// since we won't be touching those anyway.\ntype Writeable<T> = { -readonly [P in keyof T]-?: T[P] };\n\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n */\ninterface DragCSSStyleDeclaration extends CSSStyleDeclaration {\n  webkitUserDrag: string;\n  MozUserSelect: string; // For some reason the Firefox property is in PascalCase.\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nexport function extendStyles(\n    dest: Writeable<CSSStyleDeclaration>,\n    source: Partial<DragCSSStyleDeclaration>) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key as keyof CSSStyleDeclaration] = source[key as keyof CSSStyleDeclaration];\n    }\n  }\n\n  return dest;\n}\n\n\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nexport function toggleNativeDragInteractions(element: HTMLElement, enable: boolean) {\n  const userSelect = enable ? '' : 'none';\n\n  extendStyles(element.style, {\n    touchAction: enable ? '' : 'none',\n    webkitUserDrag: enable ? '' : 'none',\n    webkitTapHighlightColor: enable ? '' : 'transparent',\n    userSelect: userSelect,\n    msUserSelect: userSelect,\n    webkitUserSelect: userSelect,\n    MozUserSelect: userSelect\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value: string): number {\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n  return parseFloat(value) * multiplier;\n}\n\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nexport function getTransformTransitionDurationInMs(element: HTMLElement): number {\n  const computedStyle = getComputedStyle(element);\n  const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n  const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n\n  // If there's no transition for `all` or `transform`, we shouldn't do anything.\n  if (!property) {\n    return 0;\n  }\n\n  // Get the index of the property that we're interested in and match\n  // it up to the same index in `transition-delay` and `transition-duration`.\n  const propertyIndex = transitionedProperties.indexOf(property);\n  const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n  const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n\n  return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n         parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle: CSSStyleDeclaration, name: string): string[] {\n  const value = computedStyle.getPropertyValue(name);\n  return value.split(',').map(part => part.trim());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EmbeddedViewRef, ElementRef, NgZone, ViewContainerRef, TemplateRef} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Subscription, Subject, Observable, Observer} from 'rxjs';\nimport {DropListRefInternal as DropListRef} from './drop-list-ref';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {extendStyles, toggleNativeDragInteractions} from './drag-styling';\nimport {getTransformTransitionDurationInMs} from './transition-duration';\n\n/** Object that can be used to configure the behavior of DragRef. */\nexport interface DragRefConfig {\n  /**\n   * Minimum amount of pixels that the user should\n   * drag, before the CDK initiates a drag sequence.\n   */\n  dragStartThreshold: number;\n\n  /**\n   * Amount the pixels the user should drag before the CDK\n   * considers them to have changed the drag direction.\n   */\n  pointerDirectionChangeThreshold: number;\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({passive: false});\n\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n\n/**\n * Template that can be used to create a drag helper element (e.g. a preview or a placeholder).\n */\ninterface DragHelperTemplate<T = any> {\n  templateRef: TemplateRef<T>;\n  data: T;\n}\n\ninterface DragHandle {\n  element: ElementRef<HTMLElement>;\n  disabled: boolean;\n}\n\n// TODO(crisbeto): add auto-scrolling functionality.\n// TODO(crisbeto): add an API for moving a draggable up/down the\n// list programmatically. Useful for keyboard controls.\n\n\n/**\n * Internal compile-time-only representation of a `DragRef`.\n * Used to avoid circular import issues between the `DragRef` and the `DropListRef`.\n * @docs-private\n */\nexport interface DragRefInternal extends DragRef {}\n\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n * @docs-private\n */\nexport class DragRef<T = any> {\n  /** Element displayed next to the user's pointer while the element is dragged. */\n  private _preview: HTMLElement;\n\n  /** Reference to the view of the preview element. */\n  private _previewRef: EmbeddedViewRef<any> | null;\n\n  /** Reference to the view of the placeholder element. */\n  private _placeholderRef: EmbeddedViewRef<any> | null;\n\n  /** Element that is rendered instead of the draggable item while it is being sorted. */\n  private _placeholder: HTMLElement;\n\n  /** Coordinates within the element at which the user picked up the element. */\n  private _pickupPositionInElement: Point;\n\n  /** Coordinates on the page at which the user picked up the element. */\n  private _pickupPositionOnPage: Point;\n\n  /**\n   * Reference to the element that comes after the draggable in the DOM, at the time\n   * it was picked up. Used for restoring its initial position when it's dropped.\n   */\n  private _nextSibling: Node | null;\n\n  /**\n   * CSS `transform` applied to the element when it isn't being dragged. We need a\n   * passive transform in order for the dragged element to retain its new position\n   * after the user has stopped dragging and because we need to know the relative\n   * position in case they start dragging again. This corresponds to `element.style.transform`.\n   */\n  private _passiveTransform: Point = {x: 0, y: 0};\n\n  /** CSS `transform` that is applied to the element while it's being dragged. */\n  private _activeTransform: Point = {x: 0, y: 0};\n\n  /** Inline `transform` value that the element had before the first dragging sequence. */\n  private _initialTransform?: string;\n\n  /**\n   * Whether the dragging sequence has been started. Doesn't\n   * necessarily mean that the element has been moved.\n   */\n  private _hasStartedDragging: boolean;\n\n  /** Whether the element has moved since the user started dragging it. */\n  private _hasMoved: boolean;\n\n  /** Drop container in which the DragRef resided when dragging began. */\n  private _initialContainer: DropListRef;\n\n  /** Cached scroll position on the page when the element was picked up. */\n  private _scrollPosition: {top: number, left: number};\n\n  /** Emits when the item is being moved. */\n  private _moveEvents = new Subject<{\n    source: DragRef;\n    pointerPosition: {x: number, y: number};\n    event: MouseEvent | TouchEvent;\n    delta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n  }>();\n\n  /**\n   * Amount of subscriptions to the move event. Used to avoid\n   * hitting the zone if the consumer didn't subscribe to it.\n   */\n  private _moveEventSubscriptions = 0;\n\n  /** Keeps track of the direction in which the user is dragging along each axis. */\n  private _pointerDirectionDelta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n\n  /** Pointer position at which the last change in the delta occurred. */\n  private _pointerPositionAtLastDirectionChange: Point;\n\n  /**\n   * Root DOM node of the drag instance. This is the element that will\n   * be moved around as the user is dragging.\n   */\n  private _rootElement: HTMLElement;\n\n  /** Subscription to pointer movement events. */\n  private _pointerMoveSubscription = Subscription.EMPTY;\n\n  /** Subscription to the event that is dispatched when the user lifts their pointer. */\n  private _pointerUpSubscription = Subscription.EMPTY;\n\n  /**\n   * Time at which the last touch event occurred. Used to avoid firing the same\n   * events multiple times on touch devices where the browser will fire a fake\n   * mouse event for each touch event, after a certain time.\n   */\n  private _lastTouchEventTime: number;\n\n  /** Cached reference to the boundary element. */\n  private _boundaryElement: HTMLElement | null = null;\n\n  /** Cached dimensions of the preview element. */\n  private _previewRect?: ClientRect;\n\n  /** Cached dimensions of the boundary element. */\n  private _boundaryRect?: ClientRect;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  private _previewTemplate: DragHelperTemplate | null;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  private _placeholderTemplate: DragHelperTemplate | null;\n\n  /** Elements that can be used to drag the draggable item. */\n  private _handles: DragHandle[] = [];\n\n  /** Whether the native interactions on the element are enabled. */\n  private _nativeInteractionsEnabled = true;\n\n  /** Axis along which dragging is locked. */\n  lockAxis: 'x' | 'y';\n\n  /** Whether starting to drag this element is disabled. */\n  get disabled(): boolean {\n    return this._disabled || !!(this.dropContainer && this.dropContainer.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  /** Emits as the drag sequence is being prepared. */\n  beforeStarted = new Subject<void>();\n\n  /** Emits when the user starts dragging the item. */\n  started = new Subject<{source: DragRef}>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  ended = new Subject<{source: DragRef}>();\n\n  /** Emits when the user has moved the item into a new container. */\n  entered = new Subject<{container: DropListRef, item: DragRef}>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  exited = new Subject<{container: DropListRef, item: DragRef}>();\n\n  /** Emits when the user drops the item inside a container. */\n  dropped = new Subject<{\n    previousIndex: number;\n    currentIndex: number;\n    item: DragRef;\n    container: DropListRef;\n    previousContainer: DropListRef;\n    isPointerOverContainer: boolean;\n  }>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  moved: Observable<{\n    source: DragRef;\n    pointerPosition: {x: number, y: number};\n    event: MouseEvent | TouchEvent;\n    delta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n  }> = Observable.create((observer: Observer<any>) => {\n    const subscription = this._moveEvents.subscribe(observer);\n    this._moveEventSubscriptions++;\n\n    return () => {\n      subscription.unsubscribe();\n      this._moveEventSubscriptions--;\n    };\n  });\n\n  /** Arbitrary data that can be attached to the drag item. */\n  data: T;\n\n  constructor(\n    element: ElementRef<HTMLElement> | HTMLElement,\n    private _document: Document,\n    private _ngZone: NgZone,\n    private _viewContainerRef: ViewContainerRef,\n    private _viewportRuler: ViewportRuler,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\n    private _config: DragRefConfig,\n    /** Droppable container that the draggable is a part of. */\n    public dropContainer?: DropListRef,\n    private _dir?: Directionality) {\n\n    this.withRootElement(element);\n    _dragDropRegistry.registerDragItem(this);\n  }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._placeholder;\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._rootElement;\n  }\n\n  /** Registers the handles that can be used to drag the element. */\n  withHandles(handles: DragHandle[]): this {\n    // TODO(crisbeto): have this accept HTMLElement[] | ElementRef<HTMLElement>[]\n    this._handles = handles;\n    handles.forEach(handle => toggleNativeDragInteractions(handle.element.nativeElement, false));\n    this._toggleNativeDragInteractions();\n    return this;\n  }\n\n  /** Registers the template that should be used for the drag preview. */\n  withPreviewTemplate(template: DragHelperTemplate | null): this {\n    // TODO(crisbeto): have this accept a TemplateRef\n    this._previewTemplate = template;\n    return this;\n  }\n\n  /** Registers the template that should be used for the drag placeholder. */\n  withPlaceholderTemplate(template: DragHelperTemplate | null): this {\n    // TODO(crisbeto): have this accept a TemplateRef\n    this._placeholderTemplate = template;\n    return this;\n  }\n\n\n  /**\n   * Sets an alternate drag root element. The root element is the element that will be moved as\n   * the user is dragging. Passing an alternate root element is useful when trying to enable\n   * dragging on an element that you might not have access to.\n   */\n  withRootElement(rootElement: ElementRef<HTMLElement> | HTMLElement): this {\n    const element = rootElement instanceof ElementRef ? rootElement.nativeElement : rootElement;\n\n    if (element !== this._rootElement) {\n      if (this._rootElement) {\n        this._removeRootElementListeners(this._rootElement);\n      }\n\n      element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n      element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n      this._rootElement = element;\n    }\n\n    return this;\n  }\n\n  /**\n   * Element to which the draggable's position will be constrained.\n   */\n  withBoundaryElement(boundaryElement: ElementRef<HTMLElement> | HTMLElement | null): this {\n    this._boundaryElement = boundaryElement instanceof ElementRef ?\n        boundaryElement.nativeElement : boundaryElement;\n    return this;\n  }\n\n  /** Removes the dragging functionality from the DOM element. */\n  dispose() {\n    this._removeRootElementListeners(this._rootElement);\n\n    // Do this check before removing from the registry since it'll\n    // stop being considered as dragged once it is removed.\n    if (this.isDragging()) {\n      // Since we move out the element to the end of the body while it's being\n      // dragged, we have to make sure that it's removed if it gets destroyed.\n      removeElement(this._rootElement);\n    }\n\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._dragDropRegistry.removeDragItem(this);\n    this._removeSubscriptions();\n    this.beforeStarted.complete();\n    this.started.complete();\n    this.ended.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this._moveEvents.complete();\n    this._handles = [];\n    this._boundaryElement = this._rootElement = this._placeholderTemplate =\n        this._previewTemplate = this._nextSibling = null!;\n  }\n\n  /** Checks whether the element is currently being dragged. */\n  isDragging(): boolean {\n    return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n  }\n\n  /** Resets a standalone drag item to its initial position. */\n  reset(): void {\n    this._rootElement.style.transform = '';\n    this._activeTransform = {x: 0, y: 0};\n    this._passiveTransform = {x: 0, y: 0};\n  }\n\n  /** Unsubscribes from the global subscriptions. */\n  private _removeSubscriptions() {\n    this._pointerMoveSubscription.unsubscribe();\n    this._pointerUpSubscription.unsubscribe();\n  }\n\n  /** Destroys the preview element and its ViewRef. */\n  private _destroyPreview() {\n    if (this._preview) {\n      removeElement(this._preview);\n    }\n\n    if (this._previewRef) {\n      this._previewRef.destroy();\n    }\n\n    this._preview = this._previewRef = null!;\n  }\n\n  /** Destroys the placeholder element and its ViewRef. */\n  private _destroyPlaceholder() {\n    if (this._placeholder) {\n      removeElement(this._placeholder);\n    }\n\n    if (this._placeholderRef) {\n      this._placeholderRef.destroy();\n    }\n\n    this._placeholder = this._placeholderRef = null!;\n  }\n\n\n  /** Handler for the `mousedown`/`touchstart` events. */\n  private _pointerDown = (event: MouseEvent | TouchEvent) => {\n    this.beforeStarted.next();\n\n    // Delegate the event based on whether it started from a handle or the element itself.\n    if (this._handles.length) {\n      const targetHandle = this._handles.find(handle => {\n        const element = handle.element.nativeElement;\n        const target = event.target;\n        return !!target && (target === element || element.contains(target as HTMLElement));\n      });\n\n      if (targetHandle && !targetHandle.disabled && !this.disabled) {\n        this._initializeDragSequence(targetHandle.element.nativeElement, event);\n      }\n    } else if (!this.disabled) {\n      this._initializeDragSequence(this._rootElement, event);\n    }\n  }\n\n  /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n  private _pointerMove = (event: MouseEvent | TouchEvent) => {\n    if (!this._hasStartedDragging) {\n      const pointerPosition = this._getPointerPositionOnPage(event);\n      const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n      const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n\n      // Only start dragging after the user has moved more than the minimum distance in either\n      // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n      // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n      // per pixel of movement (e.g. if the user moves their pointer quickly).\n      if (distanceX + distanceY >= this._config.dragStartThreshold) {\n        this._hasStartedDragging = true;\n        this._ngZone.run(() => this._startDragSequence(event));\n      }\n\n      return;\n    }\n\n    // We only need the preview dimensions if we have a boundary element.\n    if (this._boundaryElement) {\n      // Cache the preview element rect if we haven't cached it already or if\n      // we cached it too early before the element dimensions were computed.\n      if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n        this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n      }\n    }\n\n    const constrainedPointerPosition = this._getConstrainedPointerPosition(event);\n    this._hasMoved = true;\n    event.preventDefault();\n    this._updatePointerDirectionDelta(constrainedPointerPosition);\n\n    if (this.dropContainer) {\n      this._updateActiveDropContainer(constrainedPointerPosition);\n    } else {\n      const activeTransform = this._activeTransform;\n      activeTransform.x =\n          constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n      activeTransform.y =\n          constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n      const transform = getTransform(activeTransform.x, activeTransform.y);\n\n      // Preserve the previous `transform` value, if there was one.\n      this._rootElement.style.transform = this._initialTransform ?\n          this._initialTransform + ' ' + transform : transform;\n\n      // Apply transform as attribute if dragging and svg element to work for IE\n      if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n        const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n        this._rootElement.setAttribute('transform', appliedTransform);\n      }\n    }\n\n    // Since this event gets fired for every pixel while dragging, we only\n    // want to fire it if the consumer opted into it. Also we have to\n    // re-enter the zone because we run all of the events on the outside.\n    if (this._moveEventSubscriptions > 0) {\n      this._ngZone.run(() => {\n        this._moveEvents.next({\n          source: this,\n          pointerPosition: constrainedPointerPosition,\n          event,\n          delta: this._pointerDirectionDelta\n        });\n      });\n    }\n  }\n\n  /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n  private _pointerUp = (event: MouseEvent | TouchEvent) => {\n    if (!this.isDragging()) {\n      return;\n    }\n\n    this._removeSubscriptions();\n    this._dragDropRegistry.stopDragging(this);\n\n    if (!this._hasStartedDragging) {\n      return;\n    }\n\n    if (!this.dropContainer) {\n      // Convert the active transform into a passive one. This means that next time\n      // the user starts dragging the item, its position will be calculated relatively\n      // to the new passive transform.\n      this._passiveTransform.x = this._activeTransform.x;\n      this._passiveTransform.y = this._activeTransform.y;\n      this._ngZone.run(() => this.ended.next({source: this}));\n      this._dragDropRegistry.stopDragging(this);\n      return;\n    }\n\n    this._animatePreviewToPlaceholder().then(() => {\n      this._cleanupDragArtifacts(event);\n      this._dragDropRegistry.stopDragging(this);\n    });\n  }\n\n  /** Starts the dragging sequence. */\n  private _startDragSequence(event: MouseEvent | TouchEvent) {\n    // Emit the event on the item before the one on the container.\n    this.started.next({source: this});\n\n    if (isTouchEvent(event)) {\n      this._lastTouchEventTime = Date.now();\n    }\n\n    if (this.dropContainer) {\n      const element = this._rootElement;\n\n      // Grab the `nextSibling` before the preview and placeholder\n      // have been created so we don't get the preview by accident.\n      this._nextSibling = element.nextSibling;\n\n      const preview = this._preview = this._createPreviewElement();\n      const placeholder = this._placeholder = this._createPlaceholderElement();\n\n      // We move the element out at the end of the body and we make it hidden, because keeping it in\n      // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n      element.style.display = 'none';\n      this._document.body.appendChild(element.parentNode!.replaceChild(placeholder, element));\n      this._document.body.appendChild(preview);\n      this.dropContainer.start();\n    }\n  }\n\n  /**\n   * Sets up the different variables and subscriptions\n   * that will be necessary for the dragging sequence.\n   * @param referenceElement Element that started the drag sequence.\n   * @param event Browser event object that started the sequence.\n   */\n  private _initializeDragSequence(referenceElement: HTMLElement, event: MouseEvent | TouchEvent) {\n    // Always stop propagation for the event that initializes\n    // the dragging sequence, in order to prevent it from potentially\n    // starting another sequence for a draggable parent somewhere up the DOM tree.\n    event.stopPropagation();\n\n    const isDragging = this.isDragging();\n    const isTouchSequence = isTouchEvent(event);\n    const isAuxiliaryMouseButton = !isTouchSequence && (event as MouseEvent).button !== 0;\n    const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n      this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n\n    // If the event started from an element with the native HTML drag&drop, it'll interfere\n    // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n    // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n    // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n    // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n    // events from firing on touch devices.\n    if (event.target && (event.target as HTMLElement).draggable && event.type === 'mousedown') {\n      event.preventDefault();\n    }\n\n    // Abort if the user is already dragging or is using a mouse button other than the primary one.\n    if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n      return;\n    }\n\n    // Cache the previous transform amount only after the first drag sequence, because\n    // we don't want our own transforms to stack on top of each other.\n    if (this._initialTransform == null) {\n      this._initialTransform = this._rootElement.style.transform || '';\n    }\n\n    this._toggleNativeDragInteractions();\n    this._hasStartedDragging = this._hasMoved = false;\n    this._initialContainer = this.dropContainer!;\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n    this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    if (this._boundaryElement) {\n      this._boundaryRect = this._boundaryElement.getBoundingClientRect();\n    }\n\n    // If we have a custom preview template, the element won't be visible anyway so we avoid the\n    // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\n    this._pickupPositionInElement = this._previewTemplate ? {x: 0, y: 0} :\n      this._getPointerPositionInElement(referenceElement, event);\n    const pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n    this._pointerDirectionDelta = {x: 0, y: 0};\n    this._pointerPositionAtLastDirectionChange = {x: pointerPosition.x, y: pointerPosition.y};\n    this._dragDropRegistry.startDragging(this, event);\n  }\n\n  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n  private _cleanupDragArtifacts(event: MouseEvent | TouchEvent) {\n    // Restore the element's visibility and insert it at its old position in the DOM.\n    // It's important that we maintain the position, because moving the element around in the DOM\n    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n    // while moving the existing elements in all other cases.\n    this._rootElement.style.display = '';\n\n    if (this._nextSibling) {\n      this._nextSibling.parentNode!.insertBefore(this._rootElement, this._nextSibling);\n    } else {\n      this._initialContainer.element.nativeElement.appendChild(this._rootElement);\n    }\n\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._boundaryRect = this._previewRect = undefined;\n\n    // Re-enter the NgZone since we bound `document` events on the outside.\n    this._ngZone.run(() => {\n      const container = this.dropContainer!;\n      const currentIndex = container.getItemIndex(this);\n      const {x, y} = this._getPointerPositionOnPage(event);\n      const isPointerOverContainer = container._isOverContainer(x, y);\n\n      this.ended.next({source: this});\n      this.dropped.next({\n        item: this,\n        currentIndex,\n        previousIndex: this._initialContainer.getItemIndex(this),\n        container: container,\n        previousContainer: this._initialContainer,\n        isPointerOverContainer\n      });\n      container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer);\n      this.dropContainer = this._initialContainer;\n    });\n  }\n\n  /**\n   * Updates the item's position in its drop container, or moves it\n   * into a new one, depending on its current drag position.\n   */\n  private _updateActiveDropContainer({x, y}: Point) {\n    // Drop container that draggable has been moved into.\n    let newContainer = this.dropContainer!._getSiblingContainerFromPosition(this, x, y);\n\n    // If we couldn't find a new container to move the item into, and the item has left it's\n    // initial container, check whether the it's over the initial container. This handles the\n    // case where two containers are connected one way and the user tries to undo dragging an\n    // item into a new container.\n    if (!newContainer && this.dropContainer !== this._initialContainer &&\n        this._initialContainer._isOverContainer(x, y)) {\n      newContainer = this._initialContainer;\n    }\n\n    if (newContainer) {\n      this._ngZone.run(() => {\n        // Notify the old container that the item has left.\n        this.exited.next({item: this, container: this.dropContainer!});\n        this.dropContainer!.exit(this);\n        // Notify the new container that the item has entered.\n        this.entered.next({item: this, container: newContainer!});\n        this.dropContainer = newContainer!;\n        this.dropContainer.enter(this, x, y);\n      });\n    }\n\n    this.dropContainer!._sortItem(this, x, y, this._pointerDirectionDelta);\n    this._preview.style.transform =\n        getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n  }\n\n  /**\n   * Creates the element that will be rendered next to the user's pointer\n   * and will be used as a preview of the element that is being dragged.\n   */\n  private _createPreviewElement(): HTMLElement {\n    let preview: HTMLElement;\n\n    if (this._previewTemplate) {\n      const viewRef = this._viewContainerRef.createEmbeddedView(this._previewTemplate.templateRef,\n                                                                this._previewTemplate.data);\n\n      preview = viewRef.rootNodes[0];\n      this._previewRef = viewRef;\n      preview.style.transform =\n          getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n    } else {\n      const element = this._rootElement;\n      const elementRect = element.getBoundingClientRect();\n\n      preview = deepCloneNode(element);\n      preview.style.width = `${elementRect.width}px`;\n      preview.style.height = `${elementRect.height}px`;\n      preview.style.transform = getTransform(elementRect.left, elementRect.top);\n    }\n\n    extendStyles(preview.style, {\n      // It's important that we disable the pointer events on the preview, because\n      // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n      pointerEvents: 'none',\n      position: 'fixed',\n      top: '0',\n      left: '0',\n      zIndex: '1000'\n    });\n\n    preview.classList.add('cdk-drag-preview');\n    preview.setAttribute('dir', this._dir ? this._dir.value : 'ltr');\n\n    return preview;\n  }\n\n  /**\n   * Animates the preview element from its current position to the location of the drop placeholder.\n   * @returns Promise that resolves when the animation completes.\n   */\n  private _animatePreviewToPlaceholder(): Promise<void> {\n    // If the user hasn't moved yet, the transitionend event won't fire.\n    if (!this._hasMoved) {\n      return Promise.resolve();\n    }\n\n    const placeholderRect = this._placeholder.getBoundingClientRect();\n\n    // Apply the class that adds a transition to the preview.\n    this._preview.classList.add('cdk-drag-animating');\n\n    // Move the preview to the placeholder position.\n    this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n\n    // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n    // apply its style, we take advantage of the available info to figure out whether we need to\n    // bind the event in the first place.\n    const duration = getTransformTransitionDurationInMs(this._preview);\n\n    if (duration === 0) {\n      return Promise.resolve();\n    }\n\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        const handler = ((event: TransitionEvent) => {\n          if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n            this._preview.removeEventListener('transitionend', handler);\n            resolve();\n            clearTimeout(timeout);\n          }\n        }) as EventListenerOrEventListenerObject;\n\n        // If a transition is short enough, the browser might not fire the `transitionend` event.\n        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n        // fire if the transition hasn't completed when it was supposed to.\n        const timeout = setTimeout(handler as Function, duration * 1.5);\n        this._preview.addEventListener('transitionend', handler);\n      });\n    });\n  }\n\n  /** Creates an element that will be shown instead of the current element while dragging. */\n  private _createPlaceholderElement(): HTMLElement {\n    let placeholder: HTMLElement;\n\n    if (this._placeholderTemplate) {\n      this._placeholderRef = this._viewContainerRef.createEmbeddedView(\n        this._placeholderTemplate.templateRef,\n        this._placeholderTemplate.data\n      );\n      placeholder = this._placeholderRef.rootNodes[0];\n    } else {\n      placeholder = deepCloneNode(this._rootElement);\n    }\n\n    placeholder.classList.add('cdk-drag-placeholder');\n    return placeholder;\n  }\n\n  /**\n   * Figures out the coordinates at which an element was picked up.\n   * @param referenceElement Element that initiated the dragging.\n   * @param event Event that initiated the dragging.\n   */\n  private _getPointerPositionInElement(referenceElement: HTMLElement,\n                                       event: MouseEvent | TouchEvent): Point {\n    const elementRect = this._rootElement.getBoundingClientRect();\n    const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n    const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n    const x = point.pageX - referenceRect.left - this._scrollPosition.left;\n    const y = point.pageY - referenceRect.top - this._scrollPosition.top;\n\n    return {\n      x: referenceRect.left - elementRect.left + x,\n      y: referenceRect.top - elementRect.top + y\n    };\n  }\n\n  /** Determines the point of the page that was touched by the user. */\n  private _getPointerPositionOnPage(event: MouseEvent | TouchEvent): Point {\n    // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n    const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n\n    return {\n      x: point.pageX - this._scrollPosition.left,\n      y: point.pageY - this._scrollPosition.top\n    };\n  }\n\n\n  /** Gets the pointer position on the page, accounting for any position constraints. */\n  private _getConstrainedPointerPosition(event: MouseEvent | TouchEvent): Point {\n    const point = this._getPointerPositionOnPage(event);\n    const dropContainerLock = this.dropContainer ? this.dropContainer.lockAxis : null;\n\n    if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n      point.y = this._pickupPositionOnPage.y;\n    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n      point.x = this._pickupPositionOnPage.x;\n    }\n\n    if (this._boundaryRect) {\n      const {x: pickupX, y: pickupY} = this._pickupPositionInElement;\n      const boundaryRect = this._boundaryRect;\n      const previewRect = this._previewRect!;\n      const minY = boundaryRect.top + pickupY;\n      const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n      const minX = boundaryRect.left + pickupX;\n      const maxX = boundaryRect.right - (previewRect.width - pickupX);\n\n      point.x = clamp(point.x, minX, maxX);\n      point.y = clamp(point.y, minY, maxY);\n    }\n\n    return point;\n  }\n\n\n  /** Updates the current drag delta, based on the user's current pointer position on the page. */\n  private _updatePointerDirectionDelta(pointerPositionOnPage: Point) {\n    const {x, y} = pointerPositionOnPage;\n    const delta = this._pointerDirectionDelta;\n    const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n\n    // Amount of pixels the user has dragged since the last time the direction changed.\n    const changeX = Math.abs(x - positionSinceLastChange.x);\n    const changeY = Math.abs(y - positionSinceLastChange.y);\n\n    // Because we handle pointer events on a per-pixel basis, we don't want the delta\n    // to change for every pixel, otherwise anything that depends on it can look erratic.\n    // To make the delta more consistent, we track how much the user has moved since the last\n    // delta change and we only update it after it has reached a certain threshold.\n    if (changeX > this._config.pointerDirectionChangeThreshold) {\n      delta.x = x > positionSinceLastChange.x ? 1 : -1;\n      positionSinceLastChange.x = x;\n    }\n\n    if (changeY > this._config.pointerDirectionChangeThreshold) {\n      delta.y = y > positionSinceLastChange.y ? 1 : -1;\n      positionSinceLastChange.y = y;\n    }\n\n    return delta;\n  }\n\n  /** Toggles the native drag interactions, based on how many handles are registered. */\n  private _toggleNativeDragInteractions() {\n    const shouldEnable = this._handles.length > 0;\n\n    // We go through the trouble of keeping track of whether the interactions are enabled,\n    // because we want to avoid triggering style recalculations unless we really have to.\n    if (shouldEnable !== this._nativeInteractionsEnabled) {\n      this._nativeInteractionsEnabled = shouldEnable;\n      toggleNativeDragInteractions(this._rootElement, shouldEnable);\n    }\n  }\n\n  /** Removes the manually-added event listeners from the root element. */\n  private _removeRootElementListeners(element: HTMLElement) {\n    element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n    element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n  }\n\n}\n\n/** Point on the page or within an element. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x: number, y: number): string {\n  // Round the transforms since some browsers will\n  // blur the elements for sub-pixel transforms.\n  return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node: HTMLElement): HTMLElement {\n  const clone = node.cloneNode(true) as HTMLElement;\n  // Remove the `id` to avoid having multiple elements with the same id on the page.\n  clone.removeAttribute('id');\n  return clone;\n}\n\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp(value: number, min: number, max: number) {\n  return Math.max(min, Math.min(max, value));\n}\n\n/**\n * Helper to remove an element from the DOM and to do all the necessary null checks.\n * @param element Element to be removed.\n */\nfunction removeElement(element: HTMLElement | null) {\n  if (element && element.parentNode) {\n    element.parentNode.removeChild(element);\n  }\n}\n\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n  return event.type.startsWith('touch');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  ViewContainerRef,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Observable, Subscription, Observer} from 'rxjs';\nimport {startWith, take, map} from 'rxjs/operators';\nimport {DragDropRegistry} from '../drag-drop-registry';\nimport {\n  CdkDragDrop,\n  CdkDragEnd,\n  CdkDragEnter,\n  CdkDragExit,\n  CdkDragMove,\n  CdkDragStart,\n} from '../drag-events';\nimport {CdkDragHandle} from './drag-handle';\nimport {CdkDragPlaceholder} from './drag-placeholder';\nimport {CdkDragPreview} from './drag-preview';\nimport {CDK_DROP_LIST} from '../drop-list-container';\nimport {CDK_DRAG_PARENT} from '../drag-parent';\nimport {DragRef, DragRefConfig} from '../drag-ref';\nimport {DropListRef} from '../drop-list-ref';\nimport {CdkDropListInternal as CdkDropList} from './drop-list';\n\n/** Injection token that can be used to configure the behavior of `CdkDrag`. */\nexport const CDK_DRAG_CONFIG = new InjectionToken<DragRefConfig>('CDK_DRAG_CONFIG', {\n  providedIn: 'root',\n  factory: CDK_DRAG_CONFIG_FACTORY\n});\n\n/** @docs-private */\nexport function CDK_DRAG_CONFIG_FACTORY(): DragRefConfig {\n  return {dragStartThreshold: 5, pointerDirectionChangeThreshold: 5};\n}\n\n/** Element that can be moved inside a CdkDropList container. */\n@Directive({\n  selector: '[cdkDrag]',\n  exportAs: 'cdkDrag',\n  host: {\n    'class': 'cdk-drag',\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n  },\n  providers: [{provide: CDK_DRAG_PARENT, useExisting: CdkDrag}]\n})\nexport class CdkDrag<T = any> implements AfterViewInit, OnDestroy {\n  /** Subscription to the stream that initializes the root element. */\n  private _rootElementInitSubscription = Subscription.EMPTY;\n\n  /** Reference to the underlying drag instance. */\n  _dragRef: DragRef<CdkDrag<T>>;\n\n  /** Elements that can be used to drag the draggable item. */\n  @ContentChildren(CdkDragHandle, {descendants: true}) _handles: QueryList<CdkDragHandle>;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  @ContentChild(CdkDragPreview) _previewTemplate: CdkDragPreview;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  @ContentChild(CdkDragPlaceholder) _placeholderTemplate: CdkDragPlaceholder;\n\n  /** Arbitrary data to attach to this drag instance. */\n  @Input('cdkDragData') data: T;\n\n  /** Locks the position of the dragged element along the specified axis. */\n  @Input('cdkDragLockAxis') lockAxis: 'x' | 'y';\n\n  /**\n   * Selector that will be used to determine the root draggable element, starting from\n   * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n   * when trying to enable dragging on an element that you might not have access to.\n   */\n  @Input('cdkDragRootElement') rootElementSelector: string;\n\n  /**\n   * Selector that will be used to determine the element to which the draggable's position will\n   * be constrained. Matching starts from the element's parent and goes up the DOM until a matching\n   * element has been found.\n   */\n  @Input('cdkDragBoundary') boundaryElementSelector: string;\n\n  /** Whether starting to drag this element is disabled. */\n  @Input('cdkDragDisabled')\n  get disabled(): boolean {\n    return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  /** Emits when the user starts dragging the item. */\n  @Output('cdkDragStarted') started: EventEmitter<CdkDragStart> = new EventEmitter<CdkDragStart>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  @Output('cdkDragEnded') ended: EventEmitter<CdkDragEnd> = new EventEmitter<CdkDragEnd>();\n\n  /** Emits when the user has moved the item into a new container. */\n  @Output('cdkDragEntered') entered: EventEmitter<CdkDragEnter<any>> =\n      new EventEmitter<CdkDragEnter<any>>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  @Output('cdkDragExited') exited: EventEmitter<CdkDragExit<any>> =\n      new EventEmitter<CdkDragExit<any>>();\n\n  /** Emits when the user drops the item inside a container. */\n  @Output('cdkDragDropped') dropped: EventEmitter<CdkDragDrop<any>> =\n      new EventEmitter<CdkDragDrop<any>>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  @Output('cdkDragMoved') moved: Observable<CdkDragMove<T>> =\n      Observable.create((observer: Observer<CdkDragMove<T>>) => {\n        const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n          source: this,\n          pointerPosition: movedEvent.pointerPosition,\n          event: movedEvent.event,\n          delta: movedEvent.delta\n        }))).subscribe(observer);\n\n        return () => {\n          subscription.unsubscribe();\n        };\n      });\n\n  constructor(\n    /** Element that the draggable is attached to. */\n    public element: ElementRef<HTMLElement>,\n    /** Droppable container that the draggable is a part of. */\n    @Inject(CDK_DROP_LIST) @Optional() @SkipSelf()\n    public dropContainer: CdkDropList,\n    @Inject(DOCUMENT) private _document: any,\n    private _ngZone: NgZone,\n    private _viewContainerRef: ViewContainerRef,\n    private _viewportRuler: ViewportRuler,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\n    @Inject(CDK_DRAG_CONFIG) private _config: DragRefConfig,\n    @Optional() private _dir: Directionality) {\n\n    const ref = this._dragRef = new DragRef(element, this._document, this._ngZone,\n      this._viewContainerRef, this._viewportRuler, this._dragDropRegistry,\n      this._config, this.dropContainer ? this.dropContainer._dropListRef : undefined,\n      this._dir);\n    ref.data = this;\n    ref.beforeStarted.subscribe(() => {\n      if (!ref.isDragging()) {\n        ref.disabled = this.disabled;\n        ref.lockAxis = this.lockAxis;\n        ref.withBoundaryElement(this._getBoundaryElement());\n      }\n    });\n    this._proxyEvents(ref);\n  }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._dragRef.getPlaceholderElement();\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._dragRef.getRootElement();\n  }\n\n  /** Resets a standalone drag item to its initial position. */\n  reset(): void {\n    this._dragRef.reset();\n  }\n\n  ngAfterViewInit() {\n    // We need to wait for the zone to stabilize, in order for the reference\n    // element to be in the proper place in the DOM. This is mostly relevant\n    // for draggable elements inside portals since they get stamped out in\n    // their original DOM position and then they get transferred to the portal.\n    this._rootElementInitSubscription = this._ngZone.onStable.asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        const rootElement = this._getRootElement();\n\n        if (rootElement.nodeType !== this._document.ELEMENT_NODE) {\n          throw Error(`cdkDrag must be attached to an element node. ` +\n                      `Currently attached to \"${rootElement.nodeName}\".`);\n        }\n\n        this._dragRef\n          .withRootElement(rootElement)\n          .withPlaceholderTemplate(this._placeholderTemplate)\n          .withPreviewTemplate(this._previewTemplate);\n\n        this._handles.changes\n          .pipe(startWith(this._handles))\n          .subscribe((handleList: QueryList<CdkDragHandle>) => {\n            this._dragRef.withHandles(handleList.filter(handle => handle._parentDrag === this));\n          });\n      });\n  }\n\n  ngOnDestroy() {\n    this._rootElementInitSubscription.unsubscribe();\n    this._dragRef.dispose();\n  }\n\n  /** Gets the root draggable element, based on the `rootElementSelector`. */\n  private _getRootElement(): HTMLElement {\n    const element = this.element.nativeElement;\n    const rootElement = this.rootElementSelector ?\n        getClosestMatchingAncestor(element, this.rootElementSelector) : null;\n\n    return rootElement || element;\n  }\n\n  /** Gets the boundary element, based on the `boundaryElementSelector`. */\n  private _getBoundaryElement() {\n    const selector = this.boundaryElementSelector;\n    return selector ? getClosestMatchingAncestor(this.element.nativeElement, selector) : null;\n  }\n\n  /**\n   * Proxies the events from a DragRef to events that\n   * match the interfaces of the CdkDrag outputs.\n   */\n  private _proxyEvents(ref: DragRef<CdkDrag<T>>) {\n    ref.started.subscribe(() => {\n      this.started.emit({source: this});\n    });\n\n    ref.ended.subscribe(() => {\n      this.ended.emit({source: this});\n    });\n\n    ref.entered.subscribe(event => {\n      this.entered.emit({\n        container: event.container.data,\n        item: this\n      });\n    });\n\n    ref.exited.subscribe(event => {\n      this.exited.emit({\n        container: event.container.data,\n        item: this\n      });\n    });\n\n    ref.dropped.subscribe(event => {\n      this.dropped.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        previousContainer: event.previousContainer.data,\n        container: event.container.data,\n        isPointerOverContainer: event.isPointerOverContainer,\n        item: this\n      });\n    });\n  }\n}\n\n/** Gets the closest ancestor of an element that matches a selector. */\nfunction getClosestMatchingAncestor(element: HTMLElement, selector: string) {\n  let currentElement = element.parentElement as HTMLElement | null;\n\n  while (currentElement) {\n    // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n    if (currentElement.matches ? currentElement.matches(selector) :\n        (currentElement as any).msMatchesSelector(selector)) {\n      return currentElement;\n    }\n\n    currentElement = currentElement.parentElement;\n  }\n\n  return null;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementRef} from '@angular/core';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Subject} from 'rxjs';\nimport {moveItemInArray} from './drag-utils';\nimport {DragRefInternal as DragRef} from './drag-ref';\n\n\n/** Counter used to generate unique ids for drop refs. */\nlet _uniqueIdCounter = 0;\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n\n/**\n * Object used to cache the position of a drag list, its items. and siblings.\n * @docs-private\n */\ninterface PositionCache {\n  /** Cached positions of the items in the list. */\n  items: ItemPositionCacheEntry[];\n  /** Cached positions of the connected lists. */\n  siblings: ListPositionCacheEntry[];\n  /** Dimensions of the list itself. */\n  self: ClientRect;\n}\n\n/**\n * Entry in the position cache for draggable items.\n * @docs-private\n */\ninterface ItemPositionCacheEntry {\n  /** Instance of the drag item. */\n  drag: DragRef;\n  /** Dimensions of the item. */\n  clientRect: ClientRect;\n  /** Amount by which the item has been moved since dragging started. */\n  offset: number;\n}\n\n/**\n * Entry in the position cache for drop lists.\n * @docs-private\n */\ninterface ListPositionCacheEntry {\n  /** Instance of the drop list. */\n  drop: DropListRef;\n  /** Dimensions of the list. */\n  clientRect: ClientRect;\n}\n\n/**\n * Internal compile-time-only representation of a `DropListRef`.\n * Used to avoid circular import issues between the `DropListRef` and the `DragRef`.\n * @docs-private\n */\nexport interface DropListRefInternal extends DropListRef {}\n\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n * @docs-private\n */\nexport class DropListRef<T = any> {\n  private _document: Document;\n\n  /**\n   * Unique ID for the drop list.\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 8.0.0\n   */\n  id = `cdk-drop-list-ref-${_uniqueIdCounter++}`;\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  disabled: boolean = false;\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  lockAxis: 'x' | 'y';\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  enterPredicate: (drag: DragRef, drop: DropListRef) => boolean = () => true;\n\n  /** Emits right before dragging has started. */\n  beforeStarted = new Subject<void>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  entered = new Subject<{item: DragRef, container: DropListRef}>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  exited = new Subject<{item: DragRef, container: DropListRef}>();\n\n  /** Emits when the user drops an item inside the container. */\n  dropped = new Subject<{\n    item: DragRef,\n    currentIndex: number,\n    previousIndex: number,\n    container: DropListRef,\n    previousContainer: DropListRef,\n    isPointerOverContainer: boolean\n  }>();\n\n  /** Emits as the user is swapping items while actively dragging. */\n  sorted = new Subject<{\n    previousIndex: number,\n    currentIndex: number,\n    container: DropListRef,\n    item: DragRef\n  }>();\n\n  /** Arbitrary data that can be attached to the drop list. */\n  data: T;\n\n  /** Whether an item in the list is being dragged. */\n  private _isDragging = false;\n\n  /** Cache of the dimensions of all the items and the sibling containers. */\n  private _positionCache: PositionCache = {items: [], siblings: [], self: {} as ClientRect};\n\n  /**\n   * Draggable items that are currently active inside the container. Includes the items\n   * from `_draggables`, as well as any items that have been dragged in, but haven't\n   * been dropped yet.\n   */\n  private _activeDraggables: DragRef[];\n\n  /**\n   * Keeps track of the item that was last swapped with the dragged item, as\n   * well as what direction the pointer was moving in when the swap occured.\n   */\n  private _previousSwap = {drag: null as DragRef | null, delta: 0};\n\n  /**\n   * Draggable items in the container.\n   * TODO(crisbeto): support arrays.\n   */\n  private _draggables: DragRef[];\n\n  private _siblings: DropListRef[] = [];\n\n  /** Direction in which the list is oriented. */\n  private _orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  constructor(\n    public element: ElementRef<HTMLElement>,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\n    _document: any,\n    private _dir?: Directionality) {\n    _dragDropRegistry.registerDropContainer(this);\n    this._document = _document;\n  }\n\n  /** Removes the drop list functionality from the DOM element. */\n  dispose() {\n    this.beforeStarted.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this.sorted.complete();\n    this._dragDropRegistry.removeDropContainer(this);\n  }\n\n  /** Whether an item from this list is currently being dragged. */\n  isDragging() {\n    return this._isDragging;\n  }\n\n  /** Starts dragging an item. */\n  start(): void {\n    this.beforeStarted.next();\n    this._isDragging = true;\n    this._activeDraggables = this._draggables.slice();\n    this._cachePositions();\n  }\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: DragRef, pointerX: number, pointerY: number): void {\n    this.entered.next({item, container: this});\n    this.start();\n\n    // We use the coordinates of where the item entered the drop\n    // zone to figure out at which index it should be inserted.\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n    const currentIndex = this._activeDraggables.indexOf(item);\n    const newPositionReference = this._activeDraggables[newIndex];\n    const placeholder = item.getPlaceholderElement();\n\n    // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n    // into another container and back again), we have to ensure that it isn't duplicated.\n    if (currentIndex > -1) {\n      this._activeDraggables.splice(currentIndex, 1);\n    }\n\n    // Don't use items that are being dragged as a reference, because\n    // their element has been moved down to the bottom of the body.\n    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n      const element = newPositionReference.getRootElement();\n      element.parentElement!.insertBefore(placeholder, element);\n      this._activeDraggables.splice(newIndex, 0, item);\n    } else {\n      this.element.nativeElement.appendChild(placeholder);\n      this._activeDraggables.push(item);\n    }\n\n    // The transform needs to be cleared so it doesn't throw off the measurements.\n    placeholder.style.transform = '';\n\n    // Note that the positions were already cached when we called `start` above,\n    // but we need to refresh them since the amount of items has changed.\n    this._cachePositions();\n  }\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: DragRef): void {\n    this._reset();\n    this.exited.next({item, container: this});\n  }\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   */\n  drop(item: DragRef, currentIndex: number, previousContainer: DropListRef,\n    isPointerOverContainer: boolean): void {\n    this._reset();\n    this.dropped.next({\n      item,\n      currentIndex,\n      previousIndex: previousContainer.getItemIndex(item),\n      container: this,\n      previousContainer,\n      isPointerOverContainer\n    });\n  }\n\n  /**\n   * Sets the draggable items that are a part of this list.\n   * @param items Items that are a part of this list.\n   */\n  withItems(items: DragRef[]): this {\n    this._draggables = items.slice();\n    return this;\n  }\n\n  /**\n   * Sets the containers that are connected to this one. When two or more containers are\n   * connected, the user will be allowed to transfer items between them.\n   * @param connectedTo Other containers that the current containers should be connected to.\n   */\n  connectedTo(connectedTo: DropListRef[]): this {\n    this._siblings = connectedTo.slice();\n    return this;\n  }\n\n  /**\n   * Sets the orientation of the container.\n   * @param orientation New orientation for the container.\n   */\n  withOrientation(orientation: 'vertical' | 'horizontal'): this {\n    this._orientation = orientation;\n    return this;\n  }\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: DragRef): number {\n    if (!this._isDragging) {\n      return this._draggables.indexOf(item);\n    }\n\n    // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n    // The rest of the logic still stands no matter what orientation we're in, however\n    // we need to invert the array when determining the index.\n    const items = this._orientation === 'horizontal' && this._dir && this._dir.value === 'rtl' ?\n        this._positionCache.items.slice().reverse() : this._positionCache.items;\n\n    return findIndex(items, currentItem => currentItem.drag === item);\n  }\n\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n  _sortItem(item: DragRef, pointerX: number, pointerY: number,\n            pointerDelta: {x: number, y: number}): void {\n    // Don't sort the item if it's out of range.\n    if (!this._isPointerNearDropContainer(pointerX, pointerY)) {\n      return;\n    }\n\n    const siblings = this._positionCache.items;\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n\n    if (newIndex === -1 && siblings.length > 0) {\n      return;\n    }\n\n    const isHorizontal = this._orientation === 'horizontal';\n    const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n    const siblingAtNewPosition = siblings[newIndex];\n    const currentPosition = siblings[currentIndex].clientRect;\n    const newPosition = siblingAtNewPosition.clientRect;\n    const delta = currentIndex > newIndex ? 1 : -1;\n\n    this._previousSwap.drag = siblingAtNewPosition.drag;\n    this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n\n    // How many pixels the item's placeholder should be offset.\n    const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n\n    // How many pixels all the other items should be offset.\n    const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n\n    // Save the previous order of the items before moving the item to its new index.\n    // We use this to check whether an item has been moved as a result of the sorting.\n    const oldOrder = siblings.slice();\n\n    // Shuffle the array in place.\n    moveItemInArray(siblings, currentIndex, newIndex);\n\n    this.sorted.next({\n      previousIndex: currentIndex,\n      currentIndex: newIndex,\n      container: this,\n      item\n    });\n\n    siblings.forEach((sibling, index) => {\n      // Don't do anything if the position hasn't changed.\n      if (oldOrder[index] === sibling) {\n        return;\n      }\n\n      const isDraggedItem = sibling.drag === item;\n      const offset = isDraggedItem ? itemOffset : siblingOffset;\n      const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                                              sibling.drag.getRootElement();\n\n      // Update the offset to reflect the new position.\n      sibling.offset += offset;\n\n      // Since we're moving the items with a `transform`, we need to adjust their cached\n      // client rects to reflect their new position, as well as swap their positions in the cache.\n      // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n      // elements may be mid-animation which will give us a wrong result.\n      if (isHorizontal) {\n        // Round the transforms since some browsers will\n        // blur the elements, for sub-pixel transforms.\n        elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n        adjustClientRect(sibling.clientRect, 0, offset);\n      } else {\n        elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n        adjustClientRect(sibling.clientRect, offset, 0);\n      }\n    });\n  }\n\n  /** Refreshes the position cache of the items and sibling containers. */\n  private _cachePositions() {\n    const isHorizontal = this._orientation === 'horizontal';\n\n    this._positionCache.self = this.element.nativeElement.getBoundingClientRect();\n    this._positionCache.items = this._activeDraggables\n      .map(drag => {\n        const elementToMeasure = this._dragDropRegistry.isDragging(drag) ?\n            // If the element is being dragged, we have to measure the\n            // placeholder, because the element is hidden.\n            drag.getPlaceholderElement() :\n            drag.getRootElement();\n        const clientRect = elementToMeasure.getBoundingClientRect();\n\n        return {\n          drag,\n          offset: 0,\n          // We need to clone the `clientRect` here, because all the values on it are readonly\n          // and we need to be able to update them. Also we can't use a spread here, because\n          // the values on a `ClientRect` aren't own properties. See:\n          // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n          clientRect: {\n            top: clientRect.top,\n            right: clientRect.right,\n            bottom: clientRect.bottom,\n            left: clientRect.left,\n            width: clientRect.width,\n            height: clientRect.height\n          }\n        };\n      })\n      .sort((a, b) => {\n        return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                              a.clientRect.top - b.clientRect.top;\n      });\n\n    this._positionCache.siblings = this._siblings.map(drop => ({\n      drop,\n      clientRect: drop.element.nativeElement.getBoundingClientRect()\n    }));\n  }\n\n  /** Resets the container to its initial state. */\n  private _reset() {\n    this._isDragging = false;\n\n    // TODO(crisbeto): may have to wait for the animations to finish.\n    this._activeDraggables.forEach(item => item.getRootElement().style.transform = '');\n    this._activeDraggables = [];\n    this._positionCache.items = [];\n    this._positionCache.siblings = [];\n    this._previousSwap.drag = null;\n    this._previousSwap.delta = 0;\n  }\n\n  /**\n   * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n   * @param currentIndex Index of the item currently being dragged.\n   * @param siblings All of the items in the list.\n   * @param delta Direction in which the user is moving.\n   */\n  private _getSiblingOffsetPx(currentIndex: number,\n                              siblings: ItemPositionCacheEntry[],\n                              delta: 1 | -1) {\n\n    const isHorizontal = this._orientation === 'horizontal';\n    const currentPosition = siblings[currentIndex].clientRect;\n    const immediateSibling = siblings[currentIndex + delta * -1];\n    let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n\n    if (immediateSibling) {\n      const start = isHorizontal ? 'left' : 'top';\n      const end = isHorizontal ? 'right' : 'bottom';\n\n      // Get the spacing between the start of the current item and the end of the one immediately\n      // after it in the direction in which the user is dragging, or vice versa. We add it to the\n      // offset in order to push the element to where it will be when it's inline and is influenced\n      // by the `margin` of its siblings.\n      if (delta === -1) {\n        siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n      } else {\n        siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n      }\n    }\n\n    return siblingOffset;\n  }\n\n  /**\n   * Checks whether the pointer coordinates are close to the drop container.\n   * @param pointerX Coordinates along the X axis.\n   * @param pointerY Coordinates along the Y axis.\n   */\n  private _isPointerNearDropContainer(pointerX: number, pointerY: number): boolean {\n    const {top, right, bottom, left, width, height} = this._positionCache.self;\n    const xThreshold = width * DROP_PROXIMITY_THRESHOLD;\n    const yThreshold = height * DROP_PROXIMITY_THRESHOLD;\n\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n           pointerX > left - xThreshold && pointerX < right + xThreshold;\n  }\n\n  /**\n   * Gets the offset in pixels by which the item that is being dragged should be moved.\n   * @param currentPosition Current position of the item.\n   * @param newPosition Position of the item where the current item should be moved.\n   * @param delta Direction in which the user is moving.\n   */\n  private _getItemOffsetPx(currentPosition: ClientRect, newPosition: ClientRect, delta: 1 | -1) {\n    const isHorizontal = this._orientation === 'horizontal';\n    let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n                                    newPosition.top - currentPosition.top;\n\n    // Account for differences in the item width/height.\n    if (delta === -1) {\n      itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                                   newPosition.height - currentPosition.height;\n    }\n\n    return itemOffset;\n  }\n\n  /**\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\n   * @param item Item that is being sorted.\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   * @param delta Direction in which the user is moving their pointer.\n   */\n  private _getItemIndexFromPointerPosition(item: DragRef, pointerX: number, pointerY: number,\n                                           delta?: {x: number, y: number}) {\n\n    const isHorizontal = this._orientation === 'horizontal';\n\n    return findIndex(this._positionCache.items, ({drag, clientRect}, _, array) => {\n      if (drag === item) {\n        // If there's only one item left in the container, it must be\n        // the dragged item itself so we use it as a reference.\n        return array.length < 2;\n      }\n\n      if (delta) {\n        const direction = isHorizontal ? delta.x : delta.y;\n\n        // If the user is still hovering over the same item as last time, and they didn't change\n        // the direction in which they're dragging, we don't consider it a direction swap.\n        if (drag === this._previousSwap.drag && direction === this._previousSwap.delta) {\n          return false;\n        }\n      }\n\n      return isHorizontal ?\n          // Round these down since most browsers report client rects with\n          // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n          pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\n          pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\n    });\n  }\n\n  /**\n   * Checks whether the user's pointer is positioned over the container.\n   * @param x Pointer position along the X axis.\n   * @param y Pointer position along the Y axis.\n   */\n  _isOverContainer(x: number, y: number): boolean {\n    return isInsideClientRect(this._positionCache.self, x, y);\n  }\n\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _getSiblingContainerFromPosition(item: DragRef, x: number, y: number): DropListRef | null {\n    const results = this._positionCache.siblings.filter(sibling => {\n      return isInsideClientRect(sibling.clientRect, x, y);\n    });\n\n    // No drop containers are intersecting with the pointer.\n    if (!results.length) {\n      return null;\n    }\n\n    const elementFromPoint = this._document.elementFromPoint(x, y);\n\n    // If there's no element at the pointer position, then\n    // the client rect is probably scrolled out of the view.\n    if (!elementFromPoint) {\n      return null;\n    }\n\n    // The `ClientRect`, that we're using to find the container over which the user is\n    // hovering, doesn't give us any information on whether the element has been scrolled\n    // out of the view or whether it's overlapping with other containers. This means that\n    // we could end up transferring the item into a container that's invisible or is positioned\n    // below another one. We use the result from `elementFromPoint` to get the top-most element\n    // at the pointer position and to find whether it's one of the intersecting drop containers.\n    const result = results.find(sibling => {\n      const element = sibling.drop.element.nativeElement;\n      return element === elementFromPoint || element.contains(elementFromPoint);\n    });\n\n    return result && result.drop.enterPredicate(item, result.drop) ? result.drop : null;\n  }\n\n}\n\n\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect: ClientRect, top: number, left: number) {\n  clientRect.top += top;\n  clientRect.bottom = clientRect.top + clientRect.height;\n\n  clientRect.left += left;\n  clientRect.right = clientRect.left + clientRect.width;\n}\n\n\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.find` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex<T>(array: T[],\n                      predicate: (value: T, index: number, obj: T[]) => boolean): number {\n\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i], i, array)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect: ClientRect, x: number, y: number) {\n  const {top, bottom, left, right} = clientRect;\n  return y >= top && y <= bottom && x >= left && x <= right;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, QueryList, ElementRef} from '@angular/core';\nimport {CdkDrag} from './directives/drag';\n\n\n/**\n * @deprecated To be removed. No longer being used. Previously the interface was used to avoid\n * circular imports between `CdkDrag` and `CdkDropList`, however now we're using the\n * `CdkDropListInternal` interface to achieve the same result, without having to maintain\n * this large of an interface.\n * @breaking-change 8.0.0\n */\nexport interface CdkDropListContainer<T = any> {\n  /** DOM node that corresponds to the drop container. */\n  element: ElementRef<HTMLElement>;\n\n  /** Arbitrary data to attach to all events emitted by this container. */\n  data: T;\n\n  /** Unique ID for the drop zone. */\n  id: string;\n\n  /** Direction in which the list is oriented. */\n  orientation: 'horizontal' | 'vertical';\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  lockAxis: 'x' | 'y';\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  disabled: boolean;\n\n  /** Starts dragging an item. */\n  start(): void;\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer: Partial<CdkDropListContainer>,\n        isPointerOverContainer: boolean): void;\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void;\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void;\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number;\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number, delta: {x: number, y: number}): void;\n  _draggables: QueryList<CdkDrag>;\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number):\n      CdkDropListContainer | null;\n  _isOverContainer(x: number, y: number): boolean;\n}\n\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n */\nexport const CDK_DROP_LIST = new InjectionToken<CdkDropListContainer>('CDK_DROP_LIST');\n\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n * @deprecated Use `CDK_DROP_LIST` instead.\n * @breaking-change 8.0.0\n */\nexport const CDK_DROP_LIST_CONTAINER = CDK_DROP_LIST;\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgZone, OnDestroy, Inject} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {Subject} from 'rxjs';\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n  passive: false,\n  capture: true\n});\n\n/** Handler for a pointer event callback. */\ntype PointerEventHandler = (event: TouchEvent | MouseEvent) => void;\n\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\n@Injectable({providedIn: 'root'})\nexport class DragDropRegistry<I, C extends {id: string}> implements OnDestroy {\n  private _document: Document;\n\n  /** Registered drop container instances. */\n  private _dropInstances = new Set<C>();\n\n  /** Registered drag item instances. */\n  private _dragInstances = new Set<I>();\n\n  /** Drag item instances that are currently being dragged. */\n  private _activeDragInstances = new Set<I>();\n\n  /** Keeps track of the event listeners that we've bound to the `document`. */\n  private _globalListeners = new Map<'touchmove' | 'mousemove' | 'touchend' | 'mouseup' | 'wheel', {\n    handler: PointerEventHandler,\n    options?: AddEventListenerOptions | boolean\n  }>();\n\n  /**\n   * Emits the `touchmove` or `mousemove` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerMove: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  /**\n   * Emits the `touchend` or `mouseup` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerUp: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  constructor(\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) _document: any) {\n    this._document = _document;\n  }\n\n  /** Adds a drop container to the registry. */\n  registerDropContainer(drop: C) {\n    if (!this._dropInstances.has(drop)) {\n      if (this.getDropContainer(drop.id)) {\n        throw Error(`Drop instance with id \"${drop.id}\" has already been registered.`);\n      }\n\n      this._dropInstances.add(drop);\n    }\n  }\n\n  /** Adds a drag item instance to the registry. */\n  registerDragItem(drag: I) {\n    this._dragInstances.add(drag);\n\n    // The `touchmove` event gets bound once, ahead of time, because WebKit\n    // won't preventDefault on a dynamically-added `touchmove` listener.\n    // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n    if (this._dragInstances.size === 1) {\n      this._ngZone.runOutsideAngular(() => {\n        // The event handler has to be explicitly active,\n        // because newer browsers make it passive by default.\n        this._document.addEventListener('touchmove', this._preventScrollListener,\n            activeCapturingEventOptions);\n      });\n    }\n  }\n\n  /** Removes a drop container from the registry. */\n  removeDropContainer(drop: C) {\n    this._dropInstances.delete(drop);\n  }\n\n  /** Removes a drag item instance from the registry. */\n  removeDragItem(drag: I) {\n    this._dragInstances.delete(drag);\n    this.stopDragging(drag);\n\n    if (this._dragInstances.size === 0) {\n      this._document.removeEventListener('touchmove', this._preventScrollListener,\n          activeCapturingEventOptions);\n    }\n  }\n\n  /**\n   * Starts the dragging sequence for a drag instance.\n   * @param drag Drag instance which is being dragged.\n   * @param event Event that initiated the dragging.\n   */\n  startDragging(drag: I, event: TouchEvent | MouseEvent) {\n    this._activeDragInstances.add(drag);\n\n    if (this._activeDragInstances.size === 1) {\n      const isTouchEvent = event.type.startsWith('touch');\n      const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n      const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n\n      // We explicitly bind __active__ listeners here, because newer browsers will default to\n      // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n      // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n      this._globalListeners\n        .set(moveEvent, {\n          handler: e => this.pointerMove.next(e),\n          options: activeCapturingEventOptions\n        })\n        .set(upEvent, {\n          handler: e => this.pointerUp.next(e),\n          options: true\n        });\n\n      // TODO(crisbeto): prevent mouse wheel scrolling while\n      // dragging until we've set up proper scroll handling.\n      if (!isTouchEvent) {\n        this._globalListeners.set('wheel', {\n          handler: this._preventScrollListener,\n          options: activeCapturingEventOptions\n        });\n      }\n\n      this._ngZone.runOutsideAngular(() => {\n        this._globalListeners.forEach((config, name) => {\n          this._document.addEventListener(name, config.handler, config.options);\n        });\n      });\n    }\n  }\n\n  /** Stops dragging a drag item instance. */\n  stopDragging(drag: I) {\n    this._activeDragInstances.delete(drag);\n\n    if (this._activeDragInstances.size === 0) {\n      this._clearGlobalListeners();\n    }\n  }\n\n  /** Gets whether a drag item instance is currently being dragged. */\n  isDragging(drag: I) {\n    return this._activeDragInstances.has(drag);\n  }\n\n  /**\n   * Gets a drop container by its id.\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 8.0.0\n   */\n  getDropContainer(id: string): C | undefined {\n    return Array.from(this._dropInstances).find(instance => instance.id === id);\n  }\n\n  ngOnDestroy() {\n    this._dragInstances.forEach(instance => this.removeDragItem(instance));\n    this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n    this._clearGlobalListeners();\n    this.pointerMove.complete();\n    this.pointerUp.complete();\n  }\n\n  /**\n   * Listener used to prevent `touchmove` and `wheel` events while the element is being dragged.\n   */\n  private _preventScrollListener = (event: Event) => {\n    if (this._activeDragInstances.size) {\n      event.preventDefault();\n    }\n  }\n\n  /** Clears out the global event listeners from the `document`. */\n  private _clearGlobalListeners() {\n    this._globalListeners.forEach((config, name) => {\n      this._document.removeEventListener(name, config.handler, config.options);\n    });\n\n    this._globalListeners.clear();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nexport const CDK_DRAG_PARENT = new InjectionToken<{}>('CDK_DRAG_PARENT');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, Optional, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CDK_DRAG_PARENT} from '../drag-parent';\nimport {toggleNativeDragInteractions} from '../drag-styling';\n\n/** Handle that can be used to drag and CdkDrag instance. */\n@Directive({\n  selector: '[cdkDragHandle]',\n  host: {\n    'class': 'cdk-drag-handle'\n  }\n})\nexport class CdkDragHandle {\n  /** Closest parent draggable instance. */\n  _parentDrag: {} | undefined;\n\n  /** Whether starting to drag through this handle is disabled. */\n  @Input('cdkDragHandleDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  constructor(\n    public element: ElementRef<HTMLElement>,\n    @Inject(CDK_DRAG_PARENT) @Optional() parentDrag?: any) {\n\n    this._parentDrag = parentDrag;\n    toggleNativeDragInteractions(element.nativeElement, false);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPlaceholder]'\n})\nexport class CdkDragPlaceholder<T = any> {\n  /** Context data to be added to the placeholder template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPreview]'\n})\nexport class CdkDragPreview<T = any> {\n  /** Context data to be added to the preview template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, OnDestroy} from '@angular/core';\n\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\n@Directive({\n  selector: '[cdkDropListGroup]',\n  exportAs: 'cdkDropListGroup',\n})\nexport class CdkDropListGroup<T> implements OnDestroy {\n  /** Drop lists registered inside the group. */\n  readonly _items = new Set<T>();\n\n  ngOnDestroy() {\n    this._items.clear();\n  }\n}\n"],"names":["args","id","type","Input","lockAxis","disabled","enterPredicate","dropped","Output","entered","exited","sorted","CdkDropList","DragDropModule","NgModule","declarations","CdkDropListGroup","CdkDrag","CdkDragHandle","CdkDragPreview","CdkDragPlaceholder","exports","moveItemInArray","array","fromIndex","toIndex","from","clamp","length","to","target","delta","i","transferArrayItem","currentArray","targetArray","currentIndex","targetIndex","splice","copyArrayItem","value","max","Math","min","extendStyles","dest","source","key","hasOwnProperty","toggleNativeDragInteractions","element","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","parseCssTimeUnitsToMs","multiplier","toLowerCase","indexOf","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","find","prop","propertyIndex","rawDurations","rawDelays","name","getPropertyValue","split","map","part","trim","getTransform","x","y","round","deepCloneNode","node","clone","cloneNode","removeAttribute","removeElement","parentNode","removeChild","isTouchEvent","event","startsWith","CDK_DRAG_CONFIG_FACTORY","dragStartThreshold","pointerDirectionChangeThreshold","getClosestMatchingAncestor","selector","currentElement","matches","msMatchesSelector","parentElement","adjustClientRect","clientRect","top","left","bottom","height","right","width","findIndex","predicate","isInsideClientRect","CDK_DROP_LIST","InjectionToken","CDK_DROP_LIST_CONTAINER","activeCapturingEventOptions","normalizePassiveListenerOptions","passive","capture","DragDropRegistry","_ngZone","_document","_this","this","_dropInstances","Set","_dragInstances","_activeDragInstances","_globalListeners","Map","pointerMove","Subject","pointerUp","_preventScrollListener","size","preventDefault","prototype","registerDropContainer","drop","has","getDropContainer","Error","add","registerDragItem","drag","runOutsideAngular","addEventListener","removeDropContainer","delete","removeDragItem","stopDragging","removeEventListener","startDragging","moveEvent","upEvent","set","handler","e","next","options","forEach","config","_clearGlobalListeners","isDragging","Array","instance","ngOnDestroy","complete","clear","Injectable","providedIn","NgZone","undefined","decorators","Inject","DOCUMENT","CDK_DRAG_PARENT","parentDrag","_disabled","_parentDrag","nativeElement","Object","defineProperty","coerceBooleanProperty","Directive","host","class","ElementRef","Optional","templateRef","TemplateRef","data","passiveEventListenerOptions","activeEventListenerOptions","DragRef","_viewContainerRef","_viewportRuler","_dragDropRegistry","_config","dropContainer","_dir","_passiveTransform","_activeTransform","_moveEvents","_moveEventSubscriptions","_pointerMoveSubscription","Subscription","EMPTY","_pointerUpSubscription","_boundaryElement","_handles","_nativeInteractionsEnabled","beforeStarted","started","ended","moved","Observable","create","observer","subscription","subscribe","unsubscribe","_pointerDown","targetHandle","handle","contains","_initializeDragSequence","_rootElement","_pointerMove","_hasStartedDragging","pointerPosition","_getPointerPositionOnPage","abs","_pickupPositionOnPage","run","_startDragSequence","_previewRect","_preview","getBoundingClientRect","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_updatePointerDirectionDelta","_updateActiveDropContainer","activeTransform","transform","_initialTransform","SVGElement","appliedTransform","setAttribute","_pointerDirectionDelta","_pointerUp","_removeSubscriptions","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","withRootElement","getPlaceholderElement","_placeholder","getRootElement","withHandles","handles","_toggleNativeDragInteractions","withPreviewTemplate","template","_previewTemplate","withPlaceholderTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","withBoundaryElement","boundaryElement","dispose","_destroyPreview","_destroyPlaceholder","_nextSibling","reset","_previewRef","destroy","_placeholderRef","_lastTouchEventTime","Date","now","nextSibling","preview","_createPreviewElement","placeholder","_createPlaceholderElement","display","body","appendChild","replaceChild","start","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","_initialContainer","_scrollPosition","getViewportScrollPosition","_boundaryRect","_pickupPositionInElement","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","insertBefore","container","getItemIndex","_a","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","newContainer","_getSiblingContainerFromPosition","exit","enter","_sortItem","viewRef","createEmbeddedView","rootNodes","elementRect","pointerEvents","position","zIndex","classList","Promise","resolve","placeholderRect","duration","propertyName","clearTimeout","timeout","setTimeout","handleElement","referenceRect","point","targetTouches","pageX","pageY","touches","changedTouches","dropContainerLock","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","minX","maxX","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","shouldEnable","CDK_DRAG_CONFIG","factory","_rootElementInitSubscription","EventEmitter","_dragRef","pipe","movedEvent","ref","_dropListRef","_getBoundaryElement","_proxyEvents","ngAfterViewInit","onStable","asObservable","take","_getRootElement","nodeType","ELEMENT_NODE","nodeName","changes","startWith","handleList","filter","rootElementSelector","boundaryElementSelector","emit","exportAs","[class.cdk-drag-dragging]","providers","provide","useExisting","SkipSelf","ViewContainerRef","ViewportRuler","Directionality","ContentChildren","descendants","ContentChild","_items","_uniqueIdCounter","DropListRef","_isDragging","_positionCache","items","siblings","self","_previousSwap","_siblings","_orientation","_activeDraggables","_draggables","slice","_cachePositions","pointerX","pointerY","newIndex","_getItemIndexFromPointerPosition","newPositionReference","push","_reset","withItems","connectedTo","withOrientation","orientation","reverse","currentItem","pointerDelta","_isPointerNearDropContainer","isHorizontal","siblingAtNewPosition","currentPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","sibling","index","isDraggedItem","offset","elementToOffset","elementToMeasure","sort","a","b","immediateSibling","end","xThreshold","yThreshold","_","direction","floor","results","elementFromPoint","result","dragDropRegistry","_changeDetectorRef","dir","_group","document","_syncInputs","_dropLists","coerceArray","list","markForCheck","useValue","[id]","[class.cdk-drop-list-dragging]","ChangeDetectorRef","forwardRef"],"mappings":"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"}