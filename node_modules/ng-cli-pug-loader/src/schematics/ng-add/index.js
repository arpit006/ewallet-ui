"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const rxjs_1 = require("rxjs");
const package_1 = require("../../utils/package");
const dependencies_1 = require("./dependencies");
const TARGET_CONFIG_PATH = 'node_modules/@angular-devkit/build-angular/src/angular-cli-files/models/webpack-configs/common.js';
const NG_ADD_PUG_LOADER_SCRIPT_NAME = 'ng-add-pug-loader.js';
function ngAdd(_options) {
    return schematics_1.chain([
        validateExecution(),
        addLoadersToPackageJson(),
        addPugRules(),
        addPostInstallScript(),
        addScriptToProject(),
        addPackageInstallTask(),
    ]);
}
exports.default = ngAdd;
/**
 * Checks if everything is fine for command execution
 */
function validateExecution() {
    return (host) => {
        if (host.exists(NG_ADD_PUG_LOADER_SCRIPT_NAME)) {
            return rxjs_1.throwError(new Error('Pug loader is already added.'));
        }
    };
}
/**
 * Inserts `apply-loader` and `pug-loader` packages into
 * application's package.json
 */
function addLoadersToPackageJson() {
    return (host) => {
        dependencies_1.devDependencies.forEach(dependency => {
            package_1.addDependencyToPackageJson(host, 'devDependencies', dependency.name, dependency.version);
        });
        return host;
    };
}
/**
 * Inserts the additional Pug rule into CLI's webpack,
 * inside node_modules folder.
 */
function addPugRules() {
    return (tree) => {
        const configFile = tree.read(TARGET_CONFIG_PATH);
        if (!configFile)
            return rxjs_1.throwError(new Error(`CLI's Webpack config was not found. Try running \`npm install\` before running this tool.`));
        const configText = configFile.toString('utf-8');
        const strPugRules = getPugLoaderRules();
        // make sure we don't add the rule if it already exists
        if (configText.indexOf(strPugRules) > -1) {
            return;
        }
        // We made it this far, let's insert that pug webpack rule
        const position = configText.indexOf('rules: [') + 8;
        const output = [configText.slice(0, position), `\n${strPugRules}`, configText.slice(position)].join('');
        tree.overwrite(TARGET_CONFIG_PATH, output);
    };
}
/**
 * Add postinstall script to re-add the pug-loader on first app install
 */
function addPostInstallScript() {
    return (host) => {
        package_1.addScriptToPackageJson(host, 'postinstall', `node ./${NG_ADD_PUG_LOADER_SCRIPT_NAME}`);
        return host;
    };
}
/**
 * Creates the script that is run at the postinstall
 * in the application's root folder.
 */
function addScriptToProject() {
    return (tree, context) => {
        const files = schematics_1.url(`../../files`)(context);
        const scriptContent = files.read(NG_ADD_PUG_LOADER_SCRIPT_NAME).toString('utf-8');
        const modifiedContent = replaceVars(scriptContent, {
            COMMON_CLI_CONFIG_PATH: TARGET_CONFIG_PATH,
            PUG_RULES: getPugLoaderRules()
        });
        tree.create(NG_ADD_PUG_LOADER_SCRIPT_NAME, modifiedContent);
    };
}
/**
 * Tell schematics engine that we need a package install after done
 */
function addPackageInstallTask() {
    return (_host, context) => {
        const depNames = dependencies_1.devDependencies.map(d => d.name).join(' ');
        context.addTask(new tasks_1.NodePackageInstallTask({
            packageName: depNames
        }));
    };
}
function replaceVars(content, variables) {
    const varRegex = /__([a-z0-9_]*)__/gi;
    let match;
    while (match = varRegex.exec(content)) {
        let [wholeVar, varName] = match;
        if (!variables[varName])
            throw new Error(`Replacement variable not found: ${wholeVar}`);
        content = content.replace(new RegExp(wholeVar, 'g'), variables[varName]);
    }
    return content;
}
function getPugLoaderRules() {
    const partialRegex = /\.(include|partial)\.(pug|jade)$/;
    return `
    {
      test: /\\.(pug|jade)$/,
      exclude: ${partialRegex},
      use: [
        { loader: 'apply-loader' },
        { loader: 'pug-loader' }
      ]
    },
    {
      test: ${partialRegex},
      loader: 'pug-loader'
    },`.replace(/\s+/gm, ' ');
}
//# sourceMappingURL=index.js.map